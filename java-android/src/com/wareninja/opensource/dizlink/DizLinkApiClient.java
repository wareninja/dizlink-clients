/***
 *   Copyleft 2014 - WareNinja.com / Rumble In The Jungle!
 * 
 *  @author: yg@wareninja.com
 *  @see https://github.com/WareNinja
 *  
 *  disclaimer: I code for fun, dunno what I'm coding about :-)
 */

package com.wareninja.opensource.dizlink;

import java.util.HashMap;
import java.util.Map;

import org.apache.http.util.TextUtils;

import com.wareninja.opensource.dizlink.utils.MyWebClient;
import com.wareninja.opensource.dizlink.utils.ResponseListener;
import com.wareninja.opensource.dizlink.utils.ResponseMeta;
import com.wareninja.opensource.dizlink.utils.ResponseModel;

/**
 * DIZ.LINK DevAPI documentation at;  http://diz.link/developers 
 *
 */
public class DizLinkApiClient {

	String api_url = "";// ->  http://api.diz.link
	String apptoken = "";// -> 'apptoken' generated by visiting http://diz.link/developers  
	public DizLinkApiClient(String apptoken) {
		setApiBase("", apptoken);
	}
	public DizLinkApiClient(String api_url, String apptoken) {
		setApiBase(api_url, apptoken);
	}
	public void setApiBase(String api_url, String apptoken) {
		this.api_url = api_url;
		if (TextUtils.isEmpty(this.api_url)) {
			// use default value! 
			this.api_url = "http://api.diz.link";
		}
		this.apptoken = apptoken;
	}

	
	/**
	 * Shorten a long URL!
	 * 
	 * parameters MUST already contain
	 * 	'long_link': long-URL-to-shorten,  (mandatory)
	 * 	'simple_links': comma-separated-simple_links (optional: upto 5 items)
	 * 
	 * example;
	 * 	parameters.put("long_link", "http://maps.google.com"); // mandatory
	 * 	parameters.put("simple_links", "gomaps,mapsgo"); // optional
	 * 
    */
	public void makeLink(Map<String, String> parameters, ResponseListener responseListener) {
		// ASYNCHRONOUS function
		ResponseModel responseModel = makeLink(parameters);
		
		if (responseModel.data==null || responseModel.meta.code>201) {
			responseListener.onError_wMeta(responseModel.meta);
		}
		else {
			responseListener.onComplete_wModel(responseModel);
		}
	}
	public ResponseModel makeLink(Map<String, String> parameters) {
		// SYNCHRONOUS function
		final String TAG = "makeLink";
		
		ResponseModel responseModel = new ResponseModel();
		
		if (parameters==null) parameters = new HashMap<String, String>();
		if (!parameters.containsKey("long_link")) {
			
			responseModel.meta.code = 400;
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = "Missing parameters!!!";

			return responseModel;
		}
		
		MyWebClient webClient = new MyWebClient(this.api_url);
		
		String methodName = "";
		methodName += "/dev/shorten";
		methodName = webClient.enrichMethodName(methodName, this.apptoken, "");// append apptoken only!
		
		//responseListener.onBegin("BEGIN"+"|"+TAG+"| methodName:"+methodName + " | parameters: "+parameters );
		
		String responseStr = webClient.post(methodName, parameters);
		responseModel.meta.code = webClient.getHttpResponseCode();
		responseModel.data = responseStr;
		
		if (responseModel.meta.code>201) {// error occured!
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = responseStr;
		}
		
		return responseModel;
	}
	
	/**
	 * Expand a short URL
	 * 
	 * parameters.put("dizlink_id","40cc1a"); // value is the id
	 * 		or 
	 * parameters.put("dizlink_id","gomaps"); // value is the short_link
	 * 
	 * @param parameters
	 * @param responseListener
	 */
	public void getLinkMeta(Map<String, String> parameters, ResponseListener responseListener) {
		// ASYNCHRONOUS function
		ResponseModel responseModel = getLinkMeta(parameters);
		
		if (responseModel.data==null || responseModel.meta.code>201) {
			responseListener.onError_wMeta(responseModel.meta);
		}
		else {
			responseListener.onComplete_wModel(responseModel);
		}
	}
	public ResponseModel getLinkMeta(Map<String, String> parameters) {
		// SYNCHRONOUS function
		final String TAG = "getLinkMeta";
		ResponseModel responseModel = new ResponseModel();
		
		if (parameters==null) parameters = new HashMap<String, String>();
		if (!TextUtils.isEmpty(this.apptoken)) parameters.put("apptoken", this.apptoken);
		
		MyWebClient webClient = new MyWebClient(this.api_url);
		
		String methodName = "";
		if (parameters.containsKey("dizlink_id")) {
			//parameters.put("api_username", parameters.get("username"));
			methodName += "/dev/" + parameters.get("dizlink_id") + ".json";
			parameters.remove("dizlink_id");
		}
		else {
			responseModel.meta.code = 400;
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = "Missing parameters!!!";
			return responseModel;
		}
		//methodName = webClient.enrichMethodName(methodName, this.apptoken, "");// append apptoken only!
		
		//responseListener.onBegin("BEGIN"+"|"+TAG+"| methodName:"+methodName );
		
		String responseStr = webClient.get(methodName, parameters);
		
		responseModel.meta.code = webClient.getHttpResponseCode();
		responseModel.data = responseStr;
		
		if (responseModel.meta.code>201) {// error occured!
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = responseStr;
		}
		
		return responseModel;
	}
	
	
	/**
	 * Analytics/stats of a short URL
	 * 
	 * parameters.put("dizlink_id","40cc1a"); // value is the id
	 * 		or 
	 * parameters.put("dizlink_id","gomaps"); // value is the short_link
	 * 
	 * @param parameters
	 * @param responseListener
	 */
	public void getLinkStats(Map<String, String> parameters, ResponseListener responseListener) {
		// ASYNCHRONOUS function
		ResponseModel responseModel = getLinkStats(parameters);
		
		if (responseModel.data==null || responseModel.meta.code>201) {
			responseListener.onError_wMeta(responseModel.meta);
		}
		else {
			responseListener.onComplete_wModel(responseModel);
		}
	}
	public ResponseModel getLinkStats(Map<String, String> parameters) {
		// SYNCHRONOUS function
		final String TAG = "getLinkStats";
		ResponseModel responseModel = new ResponseModel();
		
		if (parameters==null) parameters = new HashMap<String, String>();
		if (!TextUtils.isEmpty(this.apptoken)) parameters.put("apptoken", this.apptoken);
		
		MyWebClient webClient = new MyWebClient(this.api_url);
		
		String methodName = "";
		if (parameters.containsKey("dizlink_id")) {
			//parameters.put("api_username", parameters.get("username"));
			methodName += "/dev/" + parameters.get("dizlink_id") + ".json" + "/stats";
			parameters.remove("dizlink_id");
		}
		else {
			responseModel.meta.code = 400;
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = "Missing parameters!!!";
			return responseModel;
		}
		//methodName = webClient.enrichMethodName(methodName, this.apptoken, "");// append apptoken only!
		
		//responseListener.onBegin("BEGIN"+"|"+TAG+"| methodName:"+methodName );
		
		String responseStr = webClient.get(methodName, parameters);
		
		responseModel.meta.code = webClient.getHttpResponseCode();
		responseModel.data = responseStr;
		
		if (responseModel.meta.code>201) {// error occured!
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = responseStr;
		}
		
		return responseModel;
	}
	
	
	/**
	 * My Links
	 * 
	 * parameters is empty or null
	 * 
	 * @param parameters
	 * @param responseListener
	 */
	public void getMyLinks(Map<String, String> parameters, ResponseListener responseListener) {
		// ASYNCHRONOUS function
		ResponseModel responseModel = getMyLinks(parameters);
		
		if (responseModel.data==null || responseModel.meta.code>201) {
			responseListener.onError_wMeta(responseModel.meta);
		}
		else {
			responseListener.onComplete_wModel(responseModel);
		}
	}
	public ResponseModel getMyLinks(Map<String, String> parameters) {
		// SYNCHRONOUS function
		final String TAG = "getMyLinks";
		ResponseModel responseModel = new ResponseModel();
		
		if (parameters==null) parameters = new HashMap<String, String>();
		if (!TextUtils.isEmpty(this.apptoken)) parameters.put("apptoken", this.apptoken);
		
		MyWebClient webClient = new MyWebClient(this.api_url);
		
		String methodName = "/dev/" + "mylinks.json";
		//methodName = webClient.enrichMethodName(methodName, this.apptoken, "");// append apptoken only!
		
		//responseListener.onBegin("BEGIN"+"|"+TAG+"| methodName:"+methodName );
		
		String responseStr = webClient.get(methodName, parameters);
		
		responseModel.meta.code = webClient.getHttpResponseCode();
		responseModel.data = responseStr;
		
		if (responseModel.meta.code>201) {// error occured!
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = responseStr;
		}
		
		return responseModel;
	}
	
	/**
	 * IP2Location
	 * 
	 * parameters is empty or null
	 * 
	 * @param parameters
	 * @param responseListener
	 */
	public void getIP2Location(Map<String, String> parameters, ResponseListener responseListener) {
		// ASYNCHRONOUS function
		ResponseModel responseModel = getMyLinks(parameters);
		
		if (responseModel.data==null || responseModel.meta.code>201) {
			responseListener.onError_wMeta(responseModel.meta);
		}
		else {
			responseListener.onComplete_wModel(responseModel);
		}
	}
	public ResponseModel getIP2Location(Map<String, String> parameters) {
		// SYNCHRONOUS function
		final String TAG = "getIP2Location";
		ResponseModel responseModel = new ResponseModel();
		
		if (parameters==null) parameters = new HashMap<String, String>();
		if (!TextUtils.isEmpty(this.apptoken)) parameters.put("apptoken", this.apptoken);
		
		MyWebClient webClient = new MyWebClient(this.api_url);
		
		String methodName = "/" + "myip.json";
		//methodName = webClient.enrichMethodName(methodName, this.apptoken, "");// append apptoken only!
		
		//responseListener.onBegin("BEGIN"+"|"+TAG+"| methodName:"+methodName );
		
		String responseStr = webClient.get(methodName, parameters);
		
		responseModel.meta.code = webClient.getHttpResponseCode();
		responseModel.data = responseStr;
		
		if (responseModel.meta.code>201) {// error occured!
			responseModel.meta.errorType = "general";
			responseModel.meta.errorDetail = responseStr;
		}
		
		return responseModel;
	}
}
